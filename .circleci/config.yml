version: 2.1
 
orbs:
 aws-cli: circleci/aws-cli@3.1.3
 
workflows:
  clean_test_build_&_deploy:
    jobs:
      - clean
      - build_client:
                  requires:
                    - clean
      - build_server:
                   requires:
                    - build_client   
     
 
 
jobs:


 clean:  # name of job
  executor: aws-cli/default
  steps:
    - checkout
    - aws-cli/setup:
        aws-access-key-id: AWS_ACCESS_KEY
        aws-secret-access-key: AWS_SECRET_KEY
        aws-region: AWS_REGION_NAME
    - run:
       name: "ECR Login"
       command: aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
    - run:
       name: "Delete client image"
       command: aws ecr batch-delete-image --repository-name $APP_NAME --image-ids imageTag=$IMAGE_TAG_CLIENT
    - run:
       name: "Delete server image"
       command: aws ecr batch-delete-image --repository-name $APP_NAME --image-ids imageTag=$IMAGE_TAG_SERVER 
 
 
#  test:  #name of job
#   docker:
#     - image: cimg/node:18.11.0
#   steps:
#     - checkout
#     - run:
#        name: "Install NPM tool"
#        command: npm install
#     - run:
#        name: "Running Test"  
#        command: npm run test
 
 build_client:  # name of job
  working_directory: ~/deploy/Incaendo_Client
  executor: aws-cli/default
  steps:
    - checkout:
        path: ~/deploy
    - aws-cli/setup:
        aws-access-key-id: AWS_ACCESS_KEY
        aws-secret-access-key: AWS_SECRET_KEY
        aws-region: AWS_REGION_NAME
    - setup_remote_docker:
        version: 20.10.14
    - run:
       name: "Building Docker Image"
       command: docker build -t $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG_CLIENT .
    - run:
       name: "ECR Login"
       command: aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
    - run:
       name: "Pushing  Image into Amazon Elastic Container"
       command: docker push $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG_CLIENT
 
 
 build_server:  # name of job
  working_directory: ~/deploy/Incaendo_Server
  executor: aws-cli/default
  steps:
    - checkout:
        path: ~/deploy
    - aws-cli/setup:
        aws-access-key-id: AWS_ACCESS_KEY
        aws-secret-access-key: AWS_SECRET_KEY
        aws-region: AWS_REGION_NAME
    - setup_remote_docker:
        version: 20.10.14
    - run:
       name: "Building Docker Image"
       command: docker build -t $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG_SERVER .
    - run:
       name: "ECR Login"
       command: aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
    - run:
       name: "Pushing  Image into Amazon Elastic Container"
       command: docker push $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG_SERVER
 
 
#  deploy:
#    machine:
#      image: ubuntu-2004:202010-01
#    steps:
#      - add_ssh_keys:
#          fingerprints:
#            - "0d:37:2a:c2:94:c8:b0:08:a9:ac:e6:b2:fd:48:82:15"
#      - run:
#          name: "Deploying the app into AWS EC2"
#          command: ssh -v -o StrictHostKeyChecking=no ec2-user@13.232.29.81 "
#                  aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_REGISTRY &&                  
#                  docker ps -aq | xargs docker stop | xargs docker rm &&
#                  docker images -aq | xargs docker image rm &&
#                  rm docker-compose.yml &&
#                  cat > 'version:"3"
#                   services
#                    frontend
#                         image 334846596010.dkr.ecr.ap-south-1.amazonaws.com/data:client_image
#                         ports
#                          - "3000:80"
#                    backend
#                       image 334846596010.dkr.ecr.ap-south-1.amazonaws.com/data:server_image
#                       ports
#                          - "5000:5000"' >> docker-compose.yml "
                 



  
 




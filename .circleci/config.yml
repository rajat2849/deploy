version: 2.1
 
orbs:
 aws-cli: circleci/aws-cli@3.1.3
 
workflows:
  clean_test_build_&_deploy:
    jobs:
      - deploy 
#       - build_client:
#                   requires:
#                     - clean
#       - build_server:
#                    requires:
#                     - build_client   
     
 



#  clean:  # name of job
#   executor: aws-cli/default
#   steps:
#     - checkout
#     - aws-cli/setup:
#         aws-access-key-id: AWS_ACCESS_KEY
#         aws-secret-access-key: AWS_SECRET_KEY
#         aws-region: AWS_REGION_NAME
#     - run:
#        name: "ECR Login"
#        command: aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
#     - run:
#        name: "Delete client image"
#        command: aws ecr batch-delete-image --repository-name $APP_NAME --image-ids imageTag=$IMAGE_TAG_CLIENT
#     - run:
#        name: "Delete server image"
#        command: aws ecr batch-delete-image --repository-name $APP_NAME --image-ids imageTag=$IMAGE_TAG_SERVER 
 
 
# #  test:  #name of job
# #   docker:
# #     - image: cimg/node:18.11.0
# #   steps:
# #     - checkout
# #     - run:
# #        name: "Install NPM tool"
# #        command: npm install
# #     - run:
# #        name: "Running Test"  
# #        command: npm run test
 
#  build_client:  # name of job
#   working_directory: ~/deploy/Incaendo_Client
#   executor: aws-cli/default
#   steps:
#     - checkout:
#         path: ~/deploy
#     - aws-cli/setup:
#         aws-access-key-id: AWS_ACCESS_KEY
#         aws-secret-access-key: AWS_SECRET_KEY
#         aws-region: AWS_REGION_NAME
#     - setup_remote_docker:
#         version: 20.10.14
#     - run:
#        name: "Building Docker Image"
#        command: docker build -t $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG_CLIENT .
#     - run:
#        name: "ECR Login"
#        command: aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
#     - run:
#        name: "Pushing  Image into Amazon Elastic Container"
#        command: docker push $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG_CLIENT
 
 
#  build_server:  # name of job
#   working_directory: ~/deploy/Incaendo_Server
#   executor: aws-cli/default
#   steps:
#     - checkout:
#         path: ~/deploy
#     - aws-cli/setup:
#         aws-access-key-id: AWS_ACCESS_KEY
#         aws-secret-access-key: AWS_SECRET_KEY
#         aws-region: AWS_REGION_NAME
#     - setup_remote_docker:
#         version: 20.10.14
#     - run:
#        name: "Building Docker Image"
#        command: docker build -t $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG_SERVER .
#     - run:
#        name: "ECR Login"
#        command: aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
#     - run:
#        name: "Pushing  Image into Amazon Elastic Container"
#        command: docker push $ECR_REGISTRY/$APP_NAME:$IMAGE_TAG_SERVER
 
jobs:

 deploy:
   machine:
     image: ubuntu-2004:202010-01
   steps:
     - add_ssh_keys:
         fingerprints:
           - "cc:ea:56:1a:05:6e:61:13:b0:e7:c5:64:eb:2f:e4:f4"
     - run:
         name: "Deploying the app into AWS EC2"
         command: |
                 ssh -v -o StrictHostKeyChecking=no ec2-user@65.0.129.112 "
                 aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_REGISTRY &&                  
                 docker ps -aq | xargs docker stop | xargs docker rm &&
                 docker images -aq | xargs docker image rm &&
                 rm docker-compose.yml && 
                 tee -a docker-compose.yml \<<EOF

                  version: 'rajat'
                  services:
                     frontend:
                        image: 334846596010.dkr.ecr.ap-south-1.amazonaws.com/data:client_image
                        ports:
                        - "3000:80"
                     backend:
                        image: 334846596010.dkr.ecr.ap-south-1.amazonaws.com/data:server_image
                        ports:
                           - "5000:5000"   &&  docker-compose up -d "
   #   - run:
   #       name: "Deploying the app into AWS EC2"
   #       command: ssh -v -o StrictHostKeyChecking=no ec2-user@65.0.129.112 "
   #                docker-compose up -d
 
                 


  
 



